{
  "openapi": "3.0.1",
  "info": {
    "description": "REST-Openapi-Specification of the [OAI-PMH-Protocol](http://www.openarchives.org/OAI/openarchivesprotocol.html) for metadata harvesting",
    "version": "1.0",
    "title": "OAI-PMH",
    "contact": {
      "name": "Martin Simon",
      "email": "martin.simon@bibliothek.uni-regensburg.de"
    }
  },
  "servers": [
    {
      "url": "/",
      "description": "Test Server"
    }
  ],
  "paths": {
    "/oai": {
      "get": {
        "tags": ["Standard Endpoint"],
        "summary": "Standard Endpoint that allows usage of all the single Methods below by selecting the correct OAI-verb as a path parameter",
        "operationId": "root-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/Verb"
          },
          {
            "$ref": "#/components/parameters/Identifier"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/Until"
          },
          {
            "$ref": "#/components/parameters/Set"
          },
          {
            "$ref": "#/components/parameters/MetadataPrefix"
          },
          {
            "$ref": "#/components/parameters/ResumptionToken"
          }
        ],
        "responses": {
          "200": {
            "description": "XML response depending on the value of the parameter *verb*",
            "content": {
              "text/xml": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/OAI_Identify"
                    },
                    {
                      "$ref": "#/components/schemas/OAI_GetRecord"
                    },
                    {
                      "$ref": "#/components/schemas/OAI_ListIdentifiers"
                    },
                    {
                      "$ref": "#/components/schemas/OAI_ListRecords"
                    },
                    {
                      "$ref": "#/components/schemas/OAI_ListMetadataFormats"
                    }
                  ],
                  "xml": {
                    "name": "OAI-PMH"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/identify": {
      "get": {
        "tags": ["Separate Methods"],
        "description": "This verb is used to retrieve information about a repository. Some of the information returned is required as part of the OAI-PMH. Repositories may also employ the Identify verb to return additional descriptive information.",
        "operationId": "identify-get",
        "responses": {
          "200": {
            "description": "XML response for the *Identify* request verb, returning a header & either a successful response or an error message",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OAI_Identify"
                }
              }
            }
          }
        }
      }
    },
    "/get-record": {
      "get": {
        "tags": ["Separate Methods"],
        "description": "This verb is used to retrieve an individual metadata record from a repository. Required arguments specify the identifier of the item from which the record is requested and the format of the metadata that should be included in the record. Depending on the level at which a repository tracks deletions, a header with a **deleted** value for the status attribute may be returned, in case the metadata format specified by the metadataPrefix is no longer available from the repository or from the specified item.",
        "operationId": "get-record-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/RequiredIdentifier"
          },
          {
            "$ref": "#/components/parameters/RequiredMetadataPrefix"
          }
        ],
        "responses": {
          "200": {
            "description": "XML response for the *GetRecord* request verb, returning a header & either a successful response or an error message",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OAI_GetRecord"
                }
              }
            }
          }
        }
      }
    },
    "/list-identifiers": {
      "get": {
        "tags": ["Separate Methods"],
        "description": "This verb is an abbreviated form of *ListRecords*, retrieving only headers rather than records. Optional arguments permit selective harvesting of headers based on set membership and/or datestamp. Depending on the repository's support for deletions, a returned header may have a status attribute of **deleted** if a record matching the arguments specified in the request has been deleted.",
        "operationId": "list-identifiers-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/Until"
          },
          {
            "$ref": "#/components/parameters/Set"
          },
          {
            "$ref": "#/components/parameters/MetadataPrefix"
          },
          {
            "$ref": "#/components/parameters/ResumptionToken"
          }
        ],
        "responses": {
          "200": {
            "description": "XML response for the *ListIdentifiers* request verb, returning a header & either a successful response or an error message",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OAI_ListIdentifiers"
                }
              }
            }
          }
        }
      }
    },
    "/list-metadata-formats": {
      "get": {
        "tags": ["Separate Methods"],
        "description": "This verb is used to retrieve the metadata formats available from a repository. An optional argument restricts the request to the formats available for a specific item.",
        "operationId": "list-metadata-formats-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/Identifier"
          }
        ],
        "responses": {
          "200": {
            "description": "XML response for the *ListMetadataFormats* request verb, returning a header & either a successful response or an error message",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OAI_ListMetadataFormats"
                }
              }
            }
          }
        }
      }
    },
    "/list-records": {
      "get": {
        "tags": ["Separate Methods"],
        "description": "This verb is used to harvest records from a repository. Optional arguments permit selective harvesting of records based on set membership and/or datestamp. Depending on the repository's support for deletions, a returned header may have a status attribute of **deleted** if a record matching the arguments specified in the request has been deleted. No metadata will be present for records with deleted status.",
        "operationId": "list-records-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/Until"
          },
          {
            "$ref": "#/components/parameters/Set"
          },
          {
            "$ref": "#/components/parameters/MetadataPrefix"
          },
          {
            "$ref": "#/components/parameters/ResumptionToken"
          }
        ],
        "responses": {
          "200": {
            "description": "XML response for the *ListRecords* request verb, returning a header & either a successful response or an error message",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OAI_ListRecords"
                }
              }
            }
          }
        }
      }
    },
    "/list-sets": {
      "get": {
        "tags": ["Separate Methods"],
        "description": "This verb is used to retrieve the set structure of a repository, useful for selective harvesting.",
        "operationId": "list-sets-get",
        "parameters": [
          {
            "$ref": "#/components/parameters/ResumptionToken"
          }
        ],
        "responses": {
          "200": {
            "description": "XML response for the *ListSets* request verb, returning a header & either a successful response or an error message",
            "content": {
              "text/xml": {
                "schema": {
                  "$ref": "#/components/schemas/OAI_ListSets"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "Verb": {
        "name": "verb",
        "in": "query",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Verb"
        }
      },
      "Identifier": {
        "name": "identifier",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "MetadataPrefix": {
        "name": "metadataPrefix",
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/MetadataPrefix"
        }
      },
      "RequiredIdentifier": {
        "name": "identifier",
        "required": true,
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "RequiredMetadataPrefix": {
        "name": "metadataPrefix",
        "required": true,
        "in": "query",
        "schema": {
          "$ref": "#/components/schemas/MetadataPrefix"
        }
      },
      "From": {
        "name": "from",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "Until": {
        "name": "until",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "Set": {
        "name": "set",
        "in": "query",
        "schema": {
          "type": "string"
        }
      },
      "ResumptionToken": {
        "name": "resumptionToken",
        "in": "query",
        "schema": {
          "type": "string"
        }
      }
    },
    "schemas": {
      "OAI-PMH": {
        "type": "object",
        "required": ["responseDate", "request"],
        "properties": {
          "xmlns": {
            "type": "string",
            "description": "The value of this **must** be the namespace URI of the OAI-PMH: [http://www.openarchives.org/OAI/2.0/](http://www.openarchives.org/OAI/2.0/).",
            "enum": ["http://www.openarchives.org/OAI/2.0/"],
            "xml": {
              "attribute": true
            }
          },
          "xmlns:xsi": {
            "type": "string",
            "description": "The value of this **must** be the namespace URI for XML schema: [http://www.w3.org/2001/XMLSchema-instance](http://www.w3.org/2001/XMLSchema-instance).",
            "enum": ["http://www.w3.org/2001/XMLSchema-instance"],
            "xml": {
              "attribute": true
            }
          },
          "xsi:schemaLocation": {
            "type": "string",
            "description": "This is a pair, the first part of which is the namespace URI (as defined by the [XML namespace specification](http://www.w3.org/TR/1999/REC-xml-names-19990114/Overview.html) ) of the OAI-PMH: [http://www.openarchives.org/OAI/2.0/](http://www.openarchives.org/OAI/2.0/). The second part is the URL of the XML schema for validation of the response: [http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd](http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd)",
            "enum": ["http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd"],
            "xml": {
              "attribute": true
            }
          },
          "responseDate": {
            "type": "string",
            "description": "A [UTCdatetime](http://www.openarchives.org/OAI/openarchivesprotocol.html#Dates) indicating the time and date that the response was sent. This must be expressed in UTC.",
            "format": "date-time"
          },
          "request": {
            "$ref": "#/components/schemas/Request"
          },
          "error": {
            "$ref": "#/components/schemas/Error"
          }
        }
      },
      "Request": {
        "type": "object",
        "description":" Indicating the protocol request that generated this response. The content of the *request* element must always be the base URL of the protocol request. The only valid attributes for the request element are the keys of the *key=value* pairs of protocol request. The attribute values must be the corresponding values of those *key=value* pairs.",
        "properties": {
          "verb": {
            "$ref": "#/components/schemas/Verb"
          },
          "identifier": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "metadataPrefix": {
            "$ref": "#/components/schemas/MetadataPrefix"
          },
          "from": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "until": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "set": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "resumptionToken": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Verb": {
        "type": "string",
        "enum": ["GetRecord", "Identify", "ListIdentifiers", "ListMetadataFormats", "ListRecords", "ListSets"],
        "xml": {
          "attribute": true
        }
      },
      "MetadataPrefix": {
        "type": "string",
        "enum": ["oai_dc"],
        "xml": {
          "attribute": true
        }
      },
      "Error": {
        "type": "object",
        "required": ["code"],
        "properties": {
          "code": {
            "$ref": "#/components/schemas/ErrorCode" 
          }
        }
      },
      "Header": {
        "type": "object",
        "required": ["identifier", "datestamp"],
        "properties": {
          "identifier": {
            "type": "string"
          },
          "setSpec": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "datestamp": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": ["deleted"],
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Record": {
        "type": "object",
        "required": ["header"],
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "metadata": {
            "type": "object",
            "properties": {
              "dublincore": {
                "$ref": "./metadata.openapi.json#/DublinCoreMetadata"
              }
            }
          },
          "about": {
            "type": "string"
          }
        }
      },
      "ResumptionToken": {
        "type": "object",
        "properties": {
          "expirationDate": {
            "type": "string",
            "xml": {
              "attribute": true
            }
          },
          "completeListSize": {
            "type": "integer",
            "xml": {
              "attribute": true
            }
          },
          "cursor": {
            "type": "integer",
            "xml": {
              "attribute": true
            }
          }
        }
      },
      "Set": {
        "type": "object",
        "required": ["setSpec", "setName"],
        "properties": {
          "setSpec": {
            "type": "string"
          },
          "setName": {
            "type": "string"
          },
          "setDescription": {
            "type": "string"
          }
        }
      },
      "MetadataFormat": {
        "type": "object",
        "properties": {
          "metadataPrefix": {
            "$ref": "#/components/schemas/MetadataPrefix"
          },
          "schema": {
            "type": "string"
          },
          "metadataNamespace": {
            "type": "string"
          }
        }
      },
      "ErrorCode": {
        "type": "string",
        "enum": ["badArgument", "badResumptionToken", "badVerb", "cannotDisseminateFormat", "idDoesNotExist", "noRecordsMatch", "noMetadataFormats", "noSetHierarchy"],
        "xml": {
          "attribute": true
        }
      },
      "OAI_Identify": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OAI-PMH"
          },
          {
            "type": "object",
            "properties": {
              "Identify": {
                "$ref": "#/components/schemas/Identify"
              }
            }
          }
        ],
        "xml": {
          "name": "OAI-PMH"
        }
      },
      "OAI_GetRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OAI-PMH"
          },
          {
            "type": "object",
            "properties": {
              "GetRecord": {
                "$ref": "#/components/schemas/GetRecord"
              }
            }
          }
        ],
        "xml": {
          "name": "OAI-PMH"
        }
      },
      "OAI_ListIdentifiers": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OAI-PMH"
          },
          {
            "type": "object",
            "properties": {
              "ListIdentifiers": {
                "$ref": "#/components/schemas/ListIdentifiers"
              }
            }
          }
        ],
        "xml": {
          "name": "OAI-PMH"
        }
      },
      "OAI_ListRecords": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OAI-PMH"
          },
          {
            "type": "object",
            "properties": {
              "ListRecords": {
                "$ref": "#/components/schemas/ListRecords"
              }
            }
          }
        ],
        "xml": {
          "name": "OAI-PMH"
        }
      },
      "OAI_ListSets": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OAI-PMH"
          },
          {
            "type": "object",
            "properties": {
              "ListSets": {
                "$ref": "#/components/schemas/ListSets"
              }
            }
          }
        ],
        "xml": {
          "name": "OAI-PMH"
        }
      },
      "OAI_ListMetadataFormats": {
        "allOf": [
          {
            "$ref": "#/components/schemas/OAI-PMH"
          },
          {
            "type": "object",
            "properties": {
              "ListMetadataFormats": {
                "$ref": "#/components/schemas/ListMetadataFormats"
              }
            }
          }
        ],
        "xml": {
          "name": "OAI-PMH"
        }
      },
      "Identify": {
        "type": "object",
        "required": ["repositoryName", "baseURL", "protocolVersion", "earliestDatestamp", "deletedRecord", "granularity", "adminEmail"],
        "properties": {
          "repositoryName": {
            "type": "string",
            "description": "A human readable name for the repository"
          },
          "baseURL": {
            "type": "string",
            "description": "The base URL of the repository"
          },
          "protocolVersion": {
            "type": "string",
            "description": "The version of the OAI-PMH supported by the repository"
          },
          "earliestDatestamp": {
            "type": "string",
            "description": "A [UTCdatetime](http://www.openarchives.org/OAI/openarchivesprotocol.html#Dates) that is the guaranteed lower limit of all datestamps recording changes, modifications, or deletions in the repository. A repository must not use datestamps lower than the one specified by the content of the *earliestDatestamp* element. *earliestDatestamp* must be expressed at the finest granularity supported by the repository.",
            "format": "date-time"
          },
          "deletedRecord": {
            "type": "string",
            "description": "The manner in which the repository supports the notion of deleted records. Legitimate values are *no*, *transient*, *persistent* with meanings defined in the [section on deletion](http://www.openarchives.org/OAI/openarchivesprotocol.html#DeletedRecords).",
            "enum": ["no", "transient", "persistent"]
          },
          "granularity": {
            "type": "string",
            "description": "The finest [harvesting granularity](http://www.openarchives.org/OAI/openarchivesprotocol.html#Datestamp) supported by the repository. The legitimate values are *YYYY-MM-DD* and *YYYY-MM-DDThh:mm:ssZ* with meanings as defined in [ISO8601](http://www.w3.org/TR/NOTE-datetime).",
            "enum": ["YYYY-MM-DD", "YYYY-MM-DDThh:mm:ssZ"]
          },
          "adminEmail": {
            "type": "array",
            "description": "The e-mail address of an administrator of the repository",
            "items": {
              "type": "string"
            }
          },
          "compression": {
            "type": "array",
            "description": "A compression encoding supported by the repository. The recommended values are those defined for the Content-Encoding header in _Section 14.11_ of [RFC 2616](http://www.ietf.org/rfc/rfc2616.txt) describing *HTTP 1.1*. A compression element should not be included for the *identity* encoding, which is implied.",
            "items": {
              "type": "string",
              "enum": ["gzip", "deflate", "compress", "br"]
            }
          },
          "description": {
            "type": "array",
            "description": "an extensible mechanism for communities to describe their repositories. For example, the *description* container could be used to include collection-level metadata in the response to the Identify request. [Implementation Guidelines](http://www.openarchives.org/OAI/2.0/guidelines.htm) are available to give directions with this respect. Each *description* container must be accompanied by the URL of an XML schema describing the structure of the description container.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "GetRecord": {
        "type": "object",
        "properties": {
          "record": {
            "$ref": "#/components/schemas/Record"
          }
        }
      },
      "ListIdentifiers": {
        "type": "object",
        "properties": {
          "header": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Header"
            }
          },
          "resumptionToken": {
            "$ref": "#/components/schemas/ResumptionToken"
          }
        }
      },
      "ListRecords": {
        "type": "object",
        "properties": {
          "record": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Record"
            }
          },
          "resumptionToken": {
            "$ref": "#/components/schemas/ResumptionToken"
          }
        }
      },
      "ListSets": {
        "type": "object",
        "properties": {
          "set": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Set"
            }
          },
          "resumptionToken": {
            "$ref": "#/components/schemas/ResumptionToken"
          }
        }
      },
      "ListMetadataFormats": {
        "type": "object",
        "properties": {
          "metadataFormat": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MetadataFormat"
            }
          }
        }
      }
    }
  }
}
